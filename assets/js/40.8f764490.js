(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{389:function(a,s,e){"use strict";e.r(s);var t=e(43),r=Object(t.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"docker-学习笔记"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-学习笔记"}},[a._v("#")]),a._v(" Docker 学习笔记")]),a._v(" "),e("h2",{attrs:{id:"docker-是什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-是什么？"}},[a._v("#")]),a._v(" Docker 是什么？")]),a._v(" "),e("p",[a._v("Docker 将软件与所需的环境捆绑在了一起，提供给用户使用。这样可以避免在不同的机器上出现不同的结果（或因环境不同而出现的错误）。")]),a._v(" "),e("p",[a._v("可以类比虚拟机，它也是带环境安装的一种解决方案。但虚拟机过于庞大、占用资源多，所以也产生了另一种虚拟化技术叫 Linux 容器（Linux Containers/LXC）。其原理并非模拟一个完整的操作系统，而是对进程进行隔离（在进程外套了一个保护层）。相比虚拟机，容器资源占用少、启动快、体积小。")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://wiki-media-1253965369.cos.ap-guangzhou.myqcloud.com/img/20200416201438.png",alt:""}})]),a._v(" "),e("p",[a._v("Docker 属于 Linux 容器的一种封装。它将应用程序与该程序的依赖，打包在一个文件里面。行这个文件，就会生成一个虚拟容器。程序就运行在这个虚拟容器里面，不必担心环境问题。")]),a._v(" "),e("blockquote",[e("p",[a._v("Docker 的主要用途，目前有三大类：")]),a._v(" "),e("ul",[e("li",[e("strong",[a._v("提供一次性的环境")]),a._v("。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境")]),a._v(" "),e("li",[e("strong",[a._v("提供弹性的云服务")]),a._v("。因为 Docker 容器可以随开随关，很适合动态扩容和缩容")]),a._v(" "),e("li",[e("strong",[a._v("组建微服务架构")]),a._v("。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构")])])]),a._v(" "),e("h2",{attrs:{id:"docker-基本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-基本概念"}},[a._v("#")]),a._v(" Docker 基本概念")]),a._v(" "),e("p",[a._v("Docker 有三个基本概念：")]),a._v(" "),e("ul",[e("li",[e("strong",[a._v("镜像 / 文件（image）")]),a._v("：将软件与环境封装在一起，就成了一个镜像")]),a._v(" "),e("li",[e("strong",[a._v("容器（container）")]),a._v("：借用面向对象的思想，镜像是一个类，容器就是将类实例化，生成的一个对象。镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等")]),a._v(" "),e("li",[e("strong",[a._v("仓库（repository）")]),a._v("：类似一个代码控制中心，用来保存镜像。")])]),a._v(" "),e("h2",{attrs:{id:"docker-安装配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-安装配置"}},[a._v("#")]),a._v(" Docker 安装配置")]),a._v(" "),e("p",[a._v("各版本系统的下载安装详见 "),e("a",{attrs:{href:"https://docs.docker.com/engine/install/",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[a._v("Install Docker Engine")]),e("OutboundLink")],1)]),a._v(" "),e("p",[a._v("安装完成后，运行下面的命令，验证是否安装成功：")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[a._v("$ docker version\n")])])]),e("h3",{attrs:{id:"配置权限"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置权限"}},[a._v("#")]),a._v(" 配置权限")]),a._v(" "),e("p",[a._v("Docker 需要 "),e("code",[a._v("sudo")]),a._v(" 权限。为了避免每次使用都要获取权限，可以把用户加入 Docker 用户组：")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("groupadd")]),a._v(" docker\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("usermod")]),a._v(" -aG docker "),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$USER")]),a._v("\n")])])]),e("p",[a._v("重启 Docker 后测试：")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[a._v("$ docker run hello-world\n")])])]),e("p",[a._v("能看到 "),e("code",[a._v("hello-world")]),a._v(" 的提示信息则为成功。")]),a._v(" "),e("h3",{attrs:{id:"启动-docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动-docker"}},[a._v("#")]),a._v(" 启动 Docker")]),a._v(" "),e("p",[a._v("Docker 安装完成后，需要启动其进程：")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" systemctl start docker\n或\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("service")]),a._v(" docker start\n")])])]),e("p",[a._v("也可以配置开机自启动：")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" systemctl "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("enable")]),a._v(" docker\n")])])]),e("h2",{attrs:{id:"基本操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本操作"}},[a._v("#")]),a._v(" 基本操作")]),a._v(" "),e("h3",{attrs:{id:"image-文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#image-文件"}},[a._v("#")]),a._v(" image 文件")]),a._v(" "),e("p",[a._v("Docker 把应用程序及其依赖，打包在 image 文件里面。image 文件可以看作是容器的模板，根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 列出本地所有 image 文件")]),a._v("\n$ docker image "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除 image 文件")]),a._v("\n$ docker image "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("imageName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),e("p",[a._v("为了节省时间与规范化，尽量用别人制作好的 image 文件（尽量不要自己制作，即使要定制，也应该基于别人的 image 文件进行加工）。"),e("br"),a._v("\n你可以在 "),e("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[a._v("Docker Hub")]),e("OutboundLink")],1),a._v(" 搜索和下载大家分享的 image 文件，尽量挑选最多人用的那一个。")])])}),[],!1,null,null,null);s.default=r.exports}}]);